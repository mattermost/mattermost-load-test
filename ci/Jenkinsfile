#!/usr/bin/env groovy

def gitCommit

pipeline {
    agent { label 'default-slave' }

    options {
        timeout(time:2, unit:'HOURS')
        buildDiscarder(logRotator(numToKeepStr:'2'))
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs notFailBuild: true
                sh "mkdir -p src/github.com/mattermost/mattermost-load-test"
                dir('src/github.com/mattermost/mattermost-load-test') {
                    checkout scm
                    script {
                        gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    }
                }
            }
        }

        stage('Build LTOPS'){
            steps {
                dir('src/github.com/mattermost/mattermost-load-test/') {
                    sh '''
                        export GOPATH=$WORKSPACE
                        export PATH=$PATH:$GOPATH/bin
                        mkdir -p $GOPATH/bin

                        make install

                        make package
                    '''
                }
            }
        }

        stage('Push to S3'){
            steps {
                dir('src/github.com/mattermost/mattermost-load-test/dist/') {
                    withAWS(credentials:'c52d20bf-88cb-40b2-8a2e-d0cedbd53f5c') {
                        script {
                            if( env.BRANCH_NAME == "master" ){
                                s3Upload bucket: 'releases.mattermost.com', cacheControl: 'no-cache', file: 'mattermost-load-test.tar.gz', metadatas: ['Cache-Control:no-cache'], path: "mattermost-load-test/"
                            } else {
                                s3Upload bucket: 'releases.mattermost.com', cacheControl: 'no-cache', file: 'mattermost-load-test.tar.gz', metadatas: ['Cache-Control:no-cache'], path: "loadtest-pr/${CHANGE_BRANCH}/"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Image'){
            steps {
                sh "mkdir -p src/github.com/mattermost/mattermost-kubernetes"
                dir('src/github.com/mattermost/mattermost-kubernetes') {
                    git branch: 'master', credentialsId: '245515fd-a6c6-4398-89ea-d7da0ca85aa1', url: 'git@github.com:mattermost/mattermost-kubernetes.git'
                }
                dir('src/github.com/mattermost/mattermost-kubernetes/') {
                    withCredentials([usernamePassword(credentialsId: 'materbuild-docker-hub', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                        sh '''
                        export GOPATH=$WORKSPACE
                        echo GOPATH=$GOPATH

                        if [ "${BRANCH_NAME}" = "master" ]; then
                          echo "Building Docker image for master"
                          export LOADTEST_BINARY=https://releases.mattermost.com/mattermost-load-test/mattermost-load-test.tar.gz
                          export DOCKER_TAG="master"
                        else
                          echo "Building Docker image for prs"
                          export LOADTEST_BINARY="https://releases.mattermost.com/loadtest-pr/${CHANGE_BRANCH}/mattermost-load-test.tar.gz"
                          export DOCKER_TAG=${CHANGE_BRANCH}
                        fi

                        export MM_BINARY=https://releases.mattermost.com/mattermost-platform/master/mattermost-enterprise-linux-amd64.tar.gz

                        echo $MM_BINARY
                        echo $LOADTEST_BINARY

                        cd docker/loadtest/

                        docker build --build-arg MM_BINARY=$MM_BINARY --build-arg LOADTEST_BINARY=$LOADTEST_BINARY -t mattermost/mattermost-loadtest:${DOCKER_TAG} . --no-cache

                        docker login --username ${DOCKER_USER} --password ${DOCKER_PASS}
                        docker push mattermost/mattermost-loadtest:${DOCKER_TAG}
                        docker logout

                        docker rmi -f mattermost/mattermost-loadtest:${DOCKER_TAG}
                        '''
                    }
                }
            }
        }

        stage('Test command line LTOPS'){
            steps {
                dir('src/github.com/mattermost/mattermost-load-test') {
                    ansiColor('xterm') {
                        sh '''
                            set +x
                            export GOPATH=$WORKSPACE
                            export PATH=$PATH:$GOPATH/bin

                            ltops --help
                        '''
                    }
                }
            }
        }

        stage('Load Test on Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-mm-test-helm', variable: 'K8SCONFIG'),
                    file(credentialsId: 'mattermost-license', variable: 'MMLICENSE'),
                    string(credentialsId: 'mattermost-license-text', variable: 'MMLICENSETEXT')]) {
                    ansiColor('xterm') {
                        dir('src/github.com/mattermost/mattermost-load-test') {
                            sh '''
                                set -ex
                                export GOPATH=$WORKSPACE
                                export PATH=$PATH:$GOPATH/bin
                                export KUBECONFIG=${K8SCONFIG}

                                helm init --client-only
                                helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com

                                BRANCH=`echo "${BRANCH_NAME}" | sed -e "s/\\(.*\\)/\\L\\1/"`
                                # TODO: Add support in LTOPS to create in any namespace
                                # kubectl create ns \${BRANCH}-${BUILD_NUMBER}

                                sed -i'.bak' 's|siteUrl:|siteUrl: "http://'\${BRANCH}-${BUILD_NUMBER}'.azure.k8s.mattermost.com"|g' ci/loadtest-helm-config.yaml
                                sed -i'.bak' 's|- loadtest.azure.k8s.mattermost.com|- '\${BRANCH}-${BUILD_NUMBER}.azure.k8s.mattermost.com'|g' ci/loadtest-helm-config.yaml
                                sed -i'.bak' 's|mattermostLicense:|mattermostLicense: '$MMLICENSETEXT'|g' ci/loadtest-helm-config.yaml

                                if [ "${BRANCH_NAME}" = "master" ]; then
                                    sed -i'.bak' 's|tag: latest|tag: '${BRANCH_NAME}'|g' ci/loadtest-helm-config.yaml
                                else
                                    sed -i'.bak' 's|tag: latest|tag: '${CHANGE_BRANCH}'|g' ci/loadtest-helm-config.yaml
                                fi
                                ltops create -c ${BRANCH}-${BUILD_NUMBER} --type kubernetes

                                ltops deploy -c ${BRANCH}-${BUILD_NUMBER} --license $MMLICENSE --helm-config ci/loadtest-helm-config.yaml


                                STATUS=\$(kubectl get pods --field-selector=status.phase!=Running)
                                while [ "\$STATUS" != "" ]; do
                                  echo "Waiting to pods come up."
                                  echo "$STATUS"
                                  echo "------"
                                  sleep 5
                                  STATUS=\$(kubectl get pods --field-selector=status.phase!=Running)
                                done
                                kubectl get pods
                                STATUS="NotReady"
                                JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
                                while [ "\$STATUS" != "" ]; do
                                  echo "Waiting to pods in Ready status."
                                  echo "\$STATUS"
                                  echo "------"
                                  sleep 5
                                  STATUS=\$(kubectl get pods -o jsonpath="\$JSONPATH" | grep "Ready=False" || echo "")
                                done

                                sleep 5
                                kubectl get pods

                                ls -la ~/.mattermost-load-test-ops

                                ltops loadtest --help

                                sleep 5

                                echo "Starting Bulk load and load tests"
                                ltops loadtest -c ${BRANCH}-${BUILD_NUMBER} --workers 2
                                echo "Done Load tests"
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            withCredentials([file(credentialsId: 'kubeconfig-mm-test-helm', variable: 'K8SCONFIG')]) {
                dir('src/github.com/mattermost/mattermost-load-test') {
                    ansiColor('xterm') {
                        sh '''#/bin/bash
                        set -ex
                        export GOPATH=$WORKSPACE
                        export PATH=$PATH:$GOPATH/bin
                        export KUBECONFIG=${K8SCONFIG}
                        BRANCH=`echo "${BRANCH_NAME}" | sed -e "s/\\(.*\\)/\\L\\1/"`

                        cp ~/.mattermost-load-test-ops/${BRANCH}-${BUILD_NUMBER}/results/loadtest*.txt loadtestresults.txt

                        ltparse results -d markdown --file loadtestresults.txt > ${WORKSPACE}/results.md || echo 0

                        cat ${WORKSPACE}/results.md || echo 0

                        ltops destroy -c ${BRANCH}-${BUILD_NUMBER} || echo 0

                        kubectl delete --all deploy,svc,pod,configmap,secrets,statefulset
                        '''
                    }
                }
            }
        }
    }
}
